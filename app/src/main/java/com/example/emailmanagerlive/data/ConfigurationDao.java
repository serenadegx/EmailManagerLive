package com.example.emailmanagerlive.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CategoryId = new Property(0, long.class, "categoryId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ReceiveProtocol = new Property(2, String.class, "receiveProtocol", false, "RECEIVE_PROTOCOL");
        public final static Property ReceiveHostKey = new Property(3, String.class, "receiveHostKey", false, "RECEIVE_HOST_KEY");
        public final static Property ReceiveHostValue = new Property(4, String.class, "receiveHostValue", false, "RECEIVE_HOST_VALUE");
        public final static Property ReceivePortKey = new Property(5, String.class, "receivePortKey", false, "RECEIVE_PORT_KEY");
        public final static Property ReceivePortValue = new Property(6, String.class, "receivePortValue", false, "RECEIVE_PORT_VALUE");
        public final static Property ReceiveEncryptKey = new Property(7, String.class, "receiveEncryptKey", false, "RECEIVE_ENCRYPT_KEY");
        public final static Property ReceiveEncryptValue = new Property(8, boolean.class, "receiveEncryptValue", false, "RECEIVE_ENCRYPT_VALUE");
        public final static Property SendProtocol = new Property(9, String.class, "sendProtocol", false, "SEND_PROTOCOL");
        public final static Property SendHostKey = new Property(10, String.class, "sendHostKey", false, "SEND_HOST_KEY");
        public final static Property SendHostValue = new Property(11, String.class, "sendHostValue", false, "SEND_HOST_VALUE");
        public final static Property SendPortKey = new Property(12, String.class, "sendPortKey", false, "SEND_PORT_KEY");
        public final static Property SendPortValue = new Property(13, String.class, "sendPortValue", false, "SEND_PORT_VALUE");
        public final static Property SendEncryptKey = new Property(14, String.class, "sendEncryptKey", false, "SEND_ENCRYPT_KEY");
        public final static Property SendEncryptValue = new Property(15, boolean.class, "sendEncryptValue", false, "SEND_ENCRYPT_VALUE");
        public final static Property AuthKey = new Property(16, String.class, "authKey", false, "AUTH_KEY");
        public final static Property AuthValue = new Property(17, boolean.class, "authValue", false, "AUTH_VALUE");
    }


    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: categoryId
                "\"NAME\" TEXT," + // 1: name
                "\"RECEIVE_PROTOCOL\" TEXT," + // 2: receiveProtocol
                "\"RECEIVE_HOST_KEY\" TEXT," + // 3: receiveHostKey
                "\"RECEIVE_HOST_VALUE\" TEXT," + // 4: receiveHostValue
                "\"RECEIVE_PORT_KEY\" TEXT," + // 5: receivePortKey
                "\"RECEIVE_PORT_VALUE\" TEXT," + // 6: receivePortValue
                "\"RECEIVE_ENCRYPT_KEY\" TEXT," + // 7: receiveEncryptKey
                "\"RECEIVE_ENCRYPT_VALUE\" INTEGER NOT NULL ," + // 8: receiveEncryptValue
                "\"SEND_PROTOCOL\" TEXT," + // 9: sendProtocol
                "\"SEND_HOST_KEY\" TEXT," + // 10: sendHostKey
                "\"SEND_HOST_VALUE\" TEXT," + // 11: sendHostValue
                "\"SEND_PORT_KEY\" TEXT," + // 12: sendPortKey
                "\"SEND_PORT_VALUE\" TEXT," + // 13: sendPortValue
                "\"SEND_ENCRYPT_KEY\" TEXT," + // 14: sendEncryptKey
                "\"SEND_ENCRYPT_VALUE\" INTEGER NOT NULL ," + // 15: sendEncryptValue
                "\"AUTH_KEY\" TEXT," + // 16: authKey
                "\"AUTH_VALUE\" INTEGER NOT NULL );"); // 17: authValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Configuration entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategoryId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String receiveProtocol = entity.getReceiveProtocol();
        if (receiveProtocol != null) {
            stmt.bindString(3, receiveProtocol);
        }
 
        String receiveHostKey = entity.getReceiveHostKey();
        if (receiveHostKey != null) {
            stmt.bindString(4, receiveHostKey);
        }
 
        String receiveHostValue = entity.getReceiveHostValue();
        if (receiveHostValue != null) {
            stmt.bindString(5, receiveHostValue);
        }
 
        String receivePortKey = entity.getReceivePortKey();
        if (receivePortKey != null) {
            stmt.bindString(6, receivePortKey);
        }
 
        String receivePortValue = entity.getReceivePortValue();
        if (receivePortValue != null) {
            stmt.bindString(7, receivePortValue);
        }
 
        String receiveEncryptKey = entity.getReceiveEncryptKey();
        if (receiveEncryptKey != null) {
            stmt.bindString(8, receiveEncryptKey);
        }
        stmt.bindLong(9, entity.getReceiveEncryptValue() ? 1L: 0L);
 
        String sendProtocol = entity.getSendProtocol();
        if (sendProtocol != null) {
            stmt.bindString(10, sendProtocol);
        }
 
        String sendHostKey = entity.getSendHostKey();
        if (sendHostKey != null) {
            stmt.bindString(11, sendHostKey);
        }
 
        String sendHostValue = entity.getSendHostValue();
        if (sendHostValue != null) {
            stmt.bindString(12, sendHostValue);
        }
 
        String sendPortKey = entity.getSendPortKey();
        if (sendPortKey != null) {
            stmt.bindString(13, sendPortKey);
        }
 
        String sendPortValue = entity.getSendPortValue();
        if (sendPortValue != null) {
            stmt.bindString(14, sendPortValue);
        }
 
        String sendEncryptKey = entity.getSendEncryptKey();
        if (sendEncryptKey != null) {
            stmt.bindString(15, sendEncryptKey);
        }
        stmt.bindLong(16, entity.getSendEncryptValue() ? 1L: 0L);
 
        String authKey = entity.getAuthKey();
        if (authKey != null) {
            stmt.bindString(17, authKey);
        }
        stmt.bindLong(18, entity.getAuthValue() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategoryId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String receiveProtocol = entity.getReceiveProtocol();
        if (receiveProtocol != null) {
            stmt.bindString(3, receiveProtocol);
        }
 
        String receiveHostKey = entity.getReceiveHostKey();
        if (receiveHostKey != null) {
            stmt.bindString(4, receiveHostKey);
        }
 
        String receiveHostValue = entity.getReceiveHostValue();
        if (receiveHostValue != null) {
            stmt.bindString(5, receiveHostValue);
        }
 
        String receivePortKey = entity.getReceivePortKey();
        if (receivePortKey != null) {
            stmt.bindString(6, receivePortKey);
        }
 
        String receivePortValue = entity.getReceivePortValue();
        if (receivePortValue != null) {
            stmt.bindString(7, receivePortValue);
        }
 
        String receiveEncryptKey = entity.getReceiveEncryptKey();
        if (receiveEncryptKey != null) {
            stmt.bindString(8, receiveEncryptKey);
        }
        stmt.bindLong(9, entity.getReceiveEncryptValue() ? 1L: 0L);
 
        String sendProtocol = entity.getSendProtocol();
        if (sendProtocol != null) {
            stmt.bindString(10, sendProtocol);
        }
 
        String sendHostKey = entity.getSendHostKey();
        if (sendHostKey != null) {
            stmt.bindString(11, sendHostKey);
        }
 
        String sendHostValue = entity.getSendHostValue();
        if (sendHostValue != null) {
            stmt.bindString(12, sendHostValue);
        }
 
        String sendPortKey = entity.getSendPortKey();
        if (sendPortKey != null) {
            stmt.bindString(13, sendPortKey);
        }
 
        String sendPortValue = entity.getSendPortValue();
        if (sendPortValue != null) {
            stmt.bindString(14, sendPortValue);
        }
 
        String sendEncryptKey = entity.getSendEncryptKey();
        if (sendEncryptKey != null) {
            stmt.bindString(15, sendEncryptKey);
        }
        stmt.bindLong(16, entity.getSendEncryptValue() ? 1L: 0L);
 
        String authKey = entity.getAuthKey();
        if (authKey != null) {
            stmt.bindString(17, authKey);
        }
        stmt.bindLong(18, entity.getAuthValue() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.getLong(offset + 0), // categoryId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiveProtocol
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // receiveHostKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // receiveHostValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receivePortKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // receivePortValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // receiveEncryptKey
            cursor.getShort(offset + 8) != 0, // receiveEncryptValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sendProtocol
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sendHostKey
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sendHostValue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sendPortKey
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sendPortValue
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sendEncryptKey
            cursor.getShort(offset + 15) != 0, // sendEncryptValue
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // authKey
            cursor.getShort(offset + 17) != 0 // authValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setCategoryId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiveProtocol(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReceiveHostKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceiveHostValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceivePortKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceivePortValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReceiveEncryptKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiveEncryptValue(cursor.getShort(offset + 8) != 0);
        entity.setSendProtocol(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSendHostKey(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSendHostValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSendPortKey(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSendPortValue(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSendEncryptKey(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSendEncryptValue(cursor.getShort(offset + 15) != 0);
        entity.setAuthKey(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAuthValue(cursor.getShort(offset + 17) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setCategoryId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getCategoryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Configuration entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
